==== Subversion

(((Subversion)))
(((Importation, depuis Subversion)))
Si vous avez lu la section précédente concernant l'utilisation de `git svn`, vous pouvez utiliser facilement ces instructions pour `git svn clone` un dépôt ; ensuite, vous pouvez arrêter d'utiliser le serveur Subversion, pousser vers un nouveau serveur Git, et commencer à l'utiliser.
Si vous voulez l'historique, vous pouvez obtenir cela aussi rapidement que vous pouvez tirer les données hors du serveur Subversion (ce qui peut prendre un bout de temps).

Cependant, l'import n'est pas parfait ; et comme ça prendra tant de temps, autant le faire correctement.
Le premier problème est l'information d'auteur.
Dans Subversion, chaque personne qui crée un _commit_ a un utilisateur sur le système qui est enregistré dans l'information de _commit_.
Les exemples dans la section précédente montrent `schacon` à quelques endroits, comme la sortie de `blame` et `git svn log`.
Si vous voulez faire correspondre cela à une meilleure donnée d'auteur Git, vous avez besoin d'une transposition des utilisateurs Subversion vers les auteurs Git.
Créez un fichier appelé `users.txt` qui a cette correspondance dans un format tel que celui-ci :

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

Pour obtenir une liste des noms d'auteur que SVN utilise, vous pouvez lancer ceci :

[source,console]
----
$ svn log --xml | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Cela génère la sortie log dans le format XML, puis garde seulement les lignes avec l'information d'auteur, rejette les doublons, enlève les étiquettes XML.
(Bien sûr, cela ne marche que sur une machine ayant `grep`, `sort` et `perl` installés.)
Ensuite, redirigez cette sortie dans votre fichier users.txt afin que vous puissiez ajouter l'information d'utilisateur Git équivalente près de chaque entrée.

[NOTE]
====
Si vous essayez ceci sous Windows, c'est là que vous commencez à avoir des problèmes.
Microsoft a fourni quelques bon conseils et exemples sur https://docs.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git[].
====

Vous pouvez fournir ce fichier à `git svn` pour l'aider à faire correspondre la donnée d'auteur plus précisément.
Vous pouvez aussi demander à `git svn` de ne pas inclure les metadonnées que Subversion importe normalement, en passant `--no-metadata` à la commande `clone` ou `init`.

[NOTE]
====
Vous devez conserver les métadonnées que vous souhaitez faire un miroir des commits réalisés dans le dépôt Git vers le dépôt SVN original.
Si vous ne voulez pas de synchronisation dans votre journal de validation, vous pouvez éliminer le paramètre `--no-metadata`.
====

Ceci fait ressembler votre commande `import` à ceci :

[source,console]
----
$ git-svn clone https://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata -s my_project
----

Maintenant vous devriez avoir un import Subversion plus joli dans votre dossier `my_project`.
Au lieu de _commits_ qui ressemblent à ceci

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

ils ressemblent à ceci :

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Non seulement le champ Auteur a l'air beaucoup mieux, mais le `git-svn-id` n'est plus là non plus.

Vous devriez aussi faire un peu de ménage post-import.
D'abord, vous devriez nettoyer les références bizarres que `git svn` a installées.
Premièrement vous déplacerez les étiquettes afin qu'elles soient de véritables étiquettes plutôt que d'étranges branches distantes, et ensuite vous déplacerez le reste des branches afin qu'elles soient locales.

Pour déplacer les étiquettes pour qu'elles soient des étiquettes Git propres, lancez

[source,console]
----
$ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done
----

Ceci prend les références qui étaient des branches distantes qui commençaient par `remotes/origin/tags` et en fait de vraies étiquettes (légères).

Ensuite, déplacez le reste des références sous `refs/remotes` pour qu'elles soient des branches locales :

[source,console]
----
$ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done
----

Il peut arriver que vous voyiez quelques autres branches qui sont suffixées par `@xxx` (où xxx est un nombre), alors que dans Subversion vous ne voyez qu'une seule branche.
C'est en fait une fonctionnalité Subversion appelée « peg-revisions », qui est quelque chose pour laquelle Git n'a tout simplement pas d'équivalent syntaxique.
Donc, `git svn` ajoute simplement le numéro de version svn au nom de la branche de la même façon que vous l'auriez écrit dans svn pour adresser la « peg-revision » de cette branche.
Si vous ne vous souciez plus des « peg-revisions », supprimez-les simplement en utilisant `git branch -d`.

[source,console]
----
$ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done
----

Maintenant toutes les vieilles branches sont de vraies branches Git et toutes les vieilles étiquettes sont de vraies étiquettes Git.

Il y a une dernière chose à nettoyer.
Malheureusement, `git svn` crée une branche supplémentaire appelée `trunk`, qui correspond à la branche par défaut de Subversion, mais la ref `trunk` pointe au même endroit que `master`.
Comme `master` est plus idiomatiquement Git, voici comment supprimer la branche supplémentaire :

[source,console]
----
$ git branch -d trunk
----

La dernière chose à faire est d'ajouter votre nouveau serveur Git en tant que serveur distant et pousser vers lui.
Voici un exemple d'ajout de votre serveur en tant que serveur distant :

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Puisque vous voulez que vos branches et étiquettes montent, vous pouvez maintenant lancer :

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

Toutes vos branches et étiquettes devraient être sur votre nouveau serveur Git dans un import joli et propre.
