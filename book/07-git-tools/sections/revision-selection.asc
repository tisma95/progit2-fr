[[s_revision_selection]]
=== Sélection des versions

Git vous permet de faire référence à certains _commits_ ou un ensemble de _commits_ de différentes façons.
Si elles ne sont pas toutes évidentes, il est bon de les connaître.

==== Révisions ponctuelles

Naturellement, vous pouvez référencer un _commit_ par sa signature SHA-1, mais il existe des méthodes plus confortables pour les humains.
Cette section présente les méthodes pour référencer un _commit_ simple.

==== Empreinte SHA courte

Git est capable de deviner de quel _commit_ vous parlez si vous ne fournissez que quelques caractères du début de la signature, tant que votre SHA-1 partiel comporte au moins 4 caractères et ne correspond pas à plusieurs _commits_.
Dans ces conditions, un seul objet correspondra à ce SHA-1 partiel.

Par exemple, pour afficher un _commit_ précis, supposons que vous exécutiez `git log` et que vous identifiiez le _commit_ où vous avez introduit une fonctionnalité précise.

[source,console]
----
$ git log
commit 734713bc047d87bf7eac9674765ae793478c50d3
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    fixed refs handling, added gc auto, updated tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'

commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    added some blame and merge stuff
----

Pour cet exemple, choisissons `1c002dd...`.
Si vous affichez le contenu de ce _commit_ via `git show`, les commandes suivantes sont équivalentes (en partant du principe que les SHA-1 courts ne sont pas ambigus).

[source,console]
----
$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d
----

Git peut déterminer une référence SHA-1 tout à la fois la plus courte possible et non ambigüe.
Ajoutez l'option `--abbrev-commit` à la commande `git log` et le résultat affiché utilisera des valeurs plus courtes mais uniques ; par défaut Git retiendra 7 caractères et augmentera au besoin :

[source,console]
----
$ git log --abbrev-commit --pretty=oneline
ca82a6d changed the version number
085bb3b removed unnecessary test code
a11bef0 first commit
----

En règle générale, entre 8 et 10 caractères sont largement suffisants pour assurer l'unicité dans un projet.
Par exemple, en février 2019, le noyau Linux (qui est un projet plutôt imposant) avait de plus de 875 000 _commits_ et presque sept millions d'objets dont les empreintes SHA sont uniques à partir des 12 premiers caractères.

[NOTE]
.Quelques mots sur SHA-1
====

Beaucoup de gens s'inquiètent qu'à un moment donné ils auront, par des circonstances hasardeuses, deux objets dans leur référentiel de hachage de même empreinte SHA-1.
Qu'en est-il réellement ?

S'il vous arrivait de valider un objet qui se hache à la même empreinte SHA-1 qu'un objet existant dans votre référentiel, Git verrait l'objet existant déjà dans votre base de données et présumerait qu'il était déjà enregistré.
Si vous essayez de récupérer l'objet de nouveau à un moment donné, vous auriez toujours les données du premier objet.

Quoi qu'il en soit, vous devriez être conscient à quel point ce scénario est ridiculement improbable.
Une empreinte SHA-1 porte sur 20 octets soit 160 bits.
Le nombre d'objets aléatoires à hacher requis pour assurer une probabilité de collision de 50 % vaut environ 2^80^ (la formule pour calculer la probabilité de collision est `p = (n(n-1)/2) * (1/2^160)`).
2^80^ vaut 1,2 × 10^24^ soit 1 million de milliards de milliards.
Cela représente 1 200 fois le nombre de grains de sable sur Terre.

Voici un exemple pour vous donner une idée de ce qui pourrait provoquer une collision du SHA-1.
Si tous les 6,5 milliards d'humains sur Terre programmaient et que chaque seconde, chacun produisait du code équivalent à l'historique entier du noyau Linux (6,5 millions d'objets Git) et le poussait sur un énorme dépôt Git, cela prendrait 2 ans pour que ce dépôt contienne assez d'objets pour avoir une probabilité de 50 % qu'une seule collision SHA-1 existe.
Ainsi, une collision organique de SHA-1 est moins probable que tous les membres de votre équipe de programmeurs soient attaqués et tués par des loups dans des incidents sans relation la même nuit.

Si vous y dédiiez plusieurs milliers de dollars de puissance de calcul, il searit possible de synthétiser deux fichiers avec la même empreinte, comme prouvé par https://shattered.io/[] en février 2017.
Git évolue vers l'utilisation de SHA256 comme algorithme par défaut d'empreinte, qui est beaucoup plus résilient aux attaques par collision, et a déjà du code en place pour amenuiser cette attaque (bien qu'il ne puisse pas totalement éliminer cette faiblesse)
====

[[s_branch_references]]
==== Références de branches

La méthode la plus commune pour désigner un _commit_ est une branche y pointant.
Dès lors, vous pouvez utiliser le nom de la branche dans toute commande utilisant un objet de type _commit_ ou un SHA-1.
Par exemple, si vous souhaitez afficher le dernier _commit_ d'une branche, les commandes suivantes sont équivalentes, en supposant que la branche `sujet1` pointe sur `ca82a6d` :

[source,console]
----
$ git show ca82a6dff817ec66f44342007202690a93763949
$ git show sujet1
----

Pour connaître l'empreinte SHA sur laquelle pointe une branche ou pour savoir parmi tous les exemples précédents ce que cela donne en terme de SHA, vous pouvez utiliser la commande de plomberie nommée `rev-parse`.
Référez-vous à <<ch10-git-internals#ch10-git-internals>> pour plus d'informations sur les commandes de plomberie ; `rev-parse` sert aux opérations de bas niveau et n'est pas conçue pour être utilisée quotidiennement.
Quoi qu'il en soit, elle se révèle utile pour comprendre ce qui se passe.
Je vous invite à tester `rev-parse` sur votre propre branche.

[source,console]
----
$ git rev-parse topic1
ca82a6dff817ec66f44342007202690a93763949
----

[[s_git_reflog]]
==== Raccourcis RefLog

Git maintient en arrière-plan un historique des références où sont passés HEAD et vos branches sur les derniers mois — ceci s'appelle le _reflog_.

Vous pouvez le consulter avec la commande `git reflog` :

[source,console]
----
$ git reflog
734713b... HEAD@{0}: commit: fixed refs handling, added gc auto, updated
d921970... HEAD@{1}: merge phedders/rdocs: Merge made by recursive.
1c002dd... HEAD@{2}: commit: added some blame and merge stuff
1c36188... HEAD@{3}: rebase -i (squash): updating HEAD
95df984... HEAD@{4}: commit: # This is a combination of two commits.
1c36188... HEAD@{5}: rebase -i (squash): updating HEAD
7e05da5... HEAD@{6}: rebase -i (pick): updating HEAD
----

À chaque fois que l'extrémité de votre branche est modifiée, Git enregistre cette information pour vous dans son historique temporaire.
Vous pouvez référencer d'anciens _commits_ avec cette donnée.
Si vous souhaitez consulter le n-ième antécédent de votre HEAD, vous pouvez utiliser la référence `@{n}` du reflog, 5 dans cet exemple :

[source,console]
----
$ git show HEAD@{5}
----

Vous pouvez également remonter le temps et savoir où en était une branche à une date donnée.
Par exemple, pour savoir où en était la branche `master` hier (_yesterday_ en anglais), tapez :

[source,console]
----
$ git show master@{yesterday}
----

Cette technique fonctionne uniquement si l'information est encore présente dans le reflog et vous ne pourrez donc pas le consulter sur des _commits_ plus vieux que quelques mois.

Pour consulter le reflog au format `git log`, exécutez: `git log -g` :

[source,console]
----
$ git log -g master
commit 734713bc047d87bf7eac9674765ae793478c50d3
Reflog: master@{0} (Scott Chacon <schacon@gmail.com>)
Reflog message: commit: fixed refs handling, added gc auto, updated
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Jan 2 18:32:33 2009 -0800

    fixed refs handling, added gc auto, updated tests

commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Reflog: master@{1} (Scott Chacon <schacon@gmail.com>)
Reflog message: merge phedders/rdocs: Merge made by recursive.
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'
----

Veuillez noter que le reflog ne stocke que des informations locales, c'est un historique de ce que vous avez fait dans votre dépôt.
Les références sont différentes pour un autre dépôt et juste après le clone d'un dépôt, votre reflog sera vide puisque qu'aucune activité n'aura été produite.
Exécuter `git show HEAD@{2.months.ago}` ne fonctionnera que si vous avez dupliqué ce projet depuis au moins 2 mois — si vous l'avez dupliqué il y a 5 minutes, vous n'obtiendrez aucun résultat.

[TIP]
.Pensez le reflog comme la version Git d'un historique shell
====
Si vous avez une culture UNIX ou Linux, vous pouvez penser le reflog comme la version Git d'un historique shell, ce qui implique que ce qui y est n'est clairement pertinent que pour vous et votre « session », et n'a rien à voir avec n'importe qui d'autre qui pourrait travailler sur la même machine.
====

[NOTE]
.Échapper les accolades dans PowerShell
====

Avec PowerShell, les accolades telles que `{` et `}` sont des caractères spéciaux et doivent être échappés.
Vous pouvez les échapper avec des apostrophes inversées ` ou placer la référence du commit entre guillemets :

[source,console]
----
$ git show HEAD@{0}     # will NOT work
$ git show HEAD@`{0`}   # OK
$ git show "HEAD@{0}"   # OK
----

====

==== Références ancêtres

Une solution fréquente pour référencer un _commit_ est d'utiliser son ascendance.
Si vous suffixez une référence par `^`, Git la résoudra comme étant le parent de cette référence.
Supposons que vous consultiez votre historique :

[source,console]
----
$ git log --pretty=format:'%h %s' --graph
* 734713b fixed refs handling, added gc auto, updated tests
*   d921970 Merge commit 'phedders/rdocs'
|\
| * 35cfb2b Some rdoc changes
* | 1c002dd added some blame and merge stuff
|/
* 1c36188 ignore *.gem
* 9b29157 add open3_detach to gemspec file list
----

Alors, vous pouvez consulter le _commit_ précédent en spécifiant `HEAD^`, ce qui signifie « le parent de HEAD » :

[source,console]
----
$ git show HEAD^
commit d921970aadf03b3cf0e71becdaab3147ba71cdef
Merge: 1c002dd... 35cfb2b...
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 15:08:43 2008 -0800

    Merge commit 'phedders/rdocs'
----

[NOTE]
.Échapper l''accent circonflexe sous Windows
====

Sous Windows dans `cmd.exe`, `^` est un caractère spécial qui doit être traité différemment.
Vous pouvez soit le doubler soit placer la référence du commit entre guillemets :

[source,console]
----
$ git show HEAD^     # will NOT work on Windows
$ git show HEAD^^    # OK
$ git show "HEAD^"   # OK
----

====

Vous pouvez également spécifier un nombre après `^` — par exemple, `d921970^2` signifie « le second parent de d921970 ».
Cette syntaxe ne sert que pour les _commits_ de fusion, qui ont plus d'un parent.
Le premier parent est la branche depuis laquelle vous avez fusionné, et le second est le _commit_ de la branche que vous avez fusionnée :

[source,console]
----
$ git show d921970^
commit 1c002dd4b536e7479fe34593e72e6c6c1819e53b
Author: Scott Chacon <schacon@gmail.com>
Date:   Thu Dec 11 14:58:32 2008 -0800

    added some blame and merge stuff

$ git show d921970^2
commit 35cfb2b795a55793d7cc56a6cc2060b4bb732548
Author: Paul Hedderly <paul+git@mjr.org>
Date:   Wed Dec 10 22:22:03 2008 +0000

    Some rdoc changes
----

Une autre solution courante pour spécifier une référence ancêtre est le `~`.
Il fait également référence au premier parent, donc `HEAD~` et `HEAD^` sont équivalents.
La différence apparaît si vous spécifiez un nombre.
`HEAD~2` signifie « le premier parent du premier parent », ou bien « le grand-parent » ; on remonte les premiers parents autant de fois que demandé.
Par exemple, dans l'historique précédemment présenté, `HEAD~3` serait :

[source,console]
----
$ git show HEAD~3
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    ignore *.gem
----

Cela peut aussi s'écrire `HEAD^^^`, qui là encore est le premier parent du premier parent du premier parent :

[source,console]
----
$ git show HEAD^^^
commit 1c3618887afb5fbcbea25b7c013f4e2114448b8d
Author: Tom Preston-Werner <tom@mojombo.com>
Date:   Fri Nov 7 13:47:59 2008 -0500

    ignore *.gem
----

Vous pouvez également combiner ces syntaxes — vous pouvez obtenir le second parent de la référence précédente (en supposant que c'était un _commit_ de fusion) en utilisant `HEAD~3^2`, et ainsi de suite.

[[s_commit_ranges]]
==== Plages de _commits_

À présent que vous pouvez spécifier des _commits_ individuels, voyons comment spécifier des plages de _commits_.
Ceci est particulièrement pratique pour la gestion des branches — si vous avez beaucoup de branches, vous pouvez utiliser les plages pour répondre à des questions telles que « Quel travail sur cette branche n'ai-je pas encore fusionné sur ma branche principale ? ».

===== Double point

La spécification de plage de _commits_ la plus fréquente est la syntaxe double-point.
En gros, cela demande à Git de résoudre la plage des _commits_ qui sont accessibles depuis un _commit_ mais ne le sont pas depuis un autre.
Par exemple, disons que votre historique ressemble à <<ch07-git-tools#double_dot>>.

[[double_dot]]
.Exemple d'historique pour la sélection de plage.
image::images/double-dot.png[Exemple d'historique pour la sélection de plage.]

Si vous voulez savoir ce qui n'a pas encore été fusionné sur votre branche `master` depuis votre branche `experiment`, vous pouvez demander à Git de vous montrer un journal des _commits_ avec `master..experiment` — ce qui signifie « tous les _commits_ accessibles par `experiment` qui ne le sont pas par `master` ».
Dans un souci de brièveté et de clarté de ces exemples, je vais utiliser les lettres des _commits_ issus du diagramme à la place de la vraie liste dans l'ordre où ils auraient dû être affichés :

[source,console]
----
$ git log master..experiment
D
C
----

Si, par contre, vous souhaitez voir l'opposé — tous les _commits_ dans `master` mais pas encore dans `experiment` — vous pouvez inverser les noms de branches, `experiment..master` vous montre tout ce que `master` accède mais qu'`experiment` ne voit pas :

[source,console]
----
$ git log experiment..master
F
E
----

C'est pratique si vous souhaitez maintenir `experiment` à jour et anticiper les fusions.
Un autre cas d'utilisation fréquent consiste à voir ce que vous vous apprêtez à pousser sur une branche distante :

[source,console]
----
$ git log origin/master..HEAD
----

Cette commande vous affiche tous les _commits_ de votre branche courante qui ne sont pas sur la branche `master` du dépôt distant `origin`.
Si vous exécutez `git push` et que votre branche courante suit `origin/master`, les _commits_ listés par `git log origin/master..HEAD` sont les _commits_ qui seront transférés sur le serveur.
Vous pouvez également laisser tomber une borne de la syntaxe pour faire comprendre à Git que vous parlez de HEAD.
Par exemple, vous pouvez obtenir les mêmes résultats que précédemment en tapant `git log origin/master..` — Git utilise HEAD si une des bornes est manquante.

===== Emplacements multiples

La syntaxe double-point est pratique comme raccourci ; mais peut-être souhaitez-vous utiliser plus d'une branche pour spécifier une révision, comme pour voir quels _commits_ sont dans plusieurs branches mais sont absents de la branche courante.
Git vous permet cela avec `^` ou `--not` en préfixe de toute référence de laquelle vous ne souhaitez pas voir les _commits_.
Les 3 commandes ci-après sont équivalentes :

[source,console]
----
$ git log refA..refB
$ git log ^refA refB
$ git log refB --not refA
----

C'est utile car cela vous permet de spécifier plus de 2 références dans votre requête, ce que vous ne pouvez accomplir avec la syntaxe double-point.
Par exemple, si vous souhaitez voir les _commits_ qui sont accessibles depuis `refA` et `refB` mais pas depuis `refC`, vous pouvez taper ces 2 commandes :

[source,console]
----
$ git log refA refB ^refC
$ git log refA refB --not refC
----

Ceci vous fournit un système de requêtage des révisions très puissant, pour vous aider à saisir ce qui se trouve sur vos branches.

[[s_triple_dot]]
===== Triple point

La dernière syntaxe majeure de sélection de plage de _commits_ est la syntaxe triple-point qui spécifie tous les _commits_ accessibles par l'une des deux références, exclusivement.
Toujours avec l'exemple d'historique de <<ch07-git-tools#double_dot>>, si vous voulez voir ce qui se trouve sur `master` ou `experiment` mais pas sur les deux, exécutez :

[source,console]
----
$ git log master...experiment
F
E
D
C
----

Encore une fois, cela vous donne un `log` normal mais ne vous montre les informations que pour ces quatre _commits_, dans l'ordre naturel des dates de validation.

Une option courante à utiliser avec la commande `log` dans ce cas est `--left-right` qui vous montre la borne de la plage à laquelle ce _commit_ appartient.
Cela rend les données plus utiles :

[source,console]
----
$ git log --left-right master...experiment
< F
< E
> D
> C
----

Avec ces outils, vous pourrez spécifier à Git les _commits_ que vous souhaitez inspecter.
