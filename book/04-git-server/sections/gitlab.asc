=== GitLab

(((servir des dépôts, GitLab)))(((GitLab)))
GitWeb reste tout de même simpliste.
Si vous cherchez un serveur Git plus moderne et complet, il existe quelques solutions libres pertinentes.
Comme GitLab est un des plus populaires, nous allons prendre son installation et son utilisation comme exemple.
Cette solution est plus complexe que l'option GitWeb et demandera indubitablement plus de maintenance, mais elle est aussi plus complète.

==== Installation

GitLab est une application web reposant sur une base de données, ce qui rend son installation un peu plus lourde que certains autres serveurs Git.
Celle-ci est heureusement très bien documentée et supportée.
GitLab recommande fortement d'installer GitLab sur votre serveur via le paquet officiel Omnibus GitLab.

Les autres options d'installation de GitLab sont :

* GitLab Helm chart, pour une utilisation avec Kubernetes,
* des paquets GitLab dockerisés pour une utilisation dans Docker,
* depuis les fichiers source,
* Avec un fournisseur Cloud tel que AWS, Google Cloud Platform, Azure, OpenShift et Digital Ocean.

Pour de plus amples informations, référez-vous au https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/README.md[readme de GitLab Community Edition (CE)].

==== Administration

L'interface d'administration de GitLab passe par le web.
Pointez simplement votre navigateur sur le nom d'hôte ou l'adresse IP où GitLab est hébergé et identifiez-vous comme administrateur.
L'utilisateur par défaut est `admin@local.host` et le mot de passe par défaut est `5iveL!fe` (qu'il vous sera demandé de changer dès la première connexion).
Une fois identifié, cliquez sur l’icône « Admin area » dans le menu en haut à droite.

[[gitlab_menu]]
.L'entrée « Admin area » dans le menu GitLab.
image::images/gitlab-menu.png[L’entrée « Admin area » dans le menu GitLab.]

===== Utilisateurs

Les utilisateurs dans GitLab sont des comptes qui correspondent à des personnes.
Les comptes utilisateurs ne sont pas très complexes ; ce sont principalement des collections d'informations personnelles rattachées à chaque information d'identification.
Chaque compte utilisateur fournit un *espace de nommage*, qui est un rassemblement logique des projets appartenant à cet utilisateur.
Si l'utilisateur +jane+ a un projet appelé +projet+, l'URL du projet est `https://serveur/jane/projet`.

[[gitlab_users]]
.L'écran d'administration des utilisateurs GitLab.
image::images/gitlab-users.png[L'écran d'administration des utilisateurs GitLab.]

Il existe deux manières de supprimer un utilisateur.
Bloquer (`Blocking`) un utilisateur l'empêche de s'identifier sur l'instance Gitlab, mais toutes les données sous l'espace de nom de cet utilisateur sont préservées, et les commits signés avec l'adresse courriel de cet utilisateur renverront à son profil.

Détruire (`Destroying`) un utilisateur, par contre, l'efface complètement de la base de données et du système de fichiers.
Tous les projets et les données situées dans son espace de nom sont effacés et tous les groupes qui lui appartiennent sont aussi effacés.
Il s'agit clairement d'une action plus destructive et permanente, et son usage est assez rare.

[[s_gitlab_groups_section]]
===== Groupes

Un groupe GitLab est un assemblage de projets, accompagné des informations de droits d'accès à ces projets.
Chaque groupe a un espace de nom de projet (de la même manière que les utilisateurs), donc si le groupe +formation+ a un projet +matériel+, son URL sera `https://serveur/formation/matériel`.

[[gitlab_groups]]
.L'écran d'administration des groupes GitLab.
image::images/gitlab-groups.png[L'écran d'administration des groupes GitLab.]

Chaque groupe est associé à des utilisateurs, dont chacun dispose d'un niveau de permissions sur les projets du groupe et sur le groupe lui-même.
Ces niveaux s'échelonnent de _invité_ : `Guest` (tickets et discussions seulement) à _propriétaire_ : `Owner` (contrôle complet du groupe, ses membres et ses projets).
Les types de permissions sont trop nombreux pour être énumérés ici, mais GitLab fournit un lien très utile sur son écran d'administration.

===== Projets

Un projet GitLab correspond grossièrement à un dépôt Git unique.
Tous les projets appartiennent à un espace de nom unique, que ce soit un utilisateur ou un groupe.
Si le projet appartient à un utilisateur, le propriétaire du projet contrôle directement les droits d'accès au projet ; si le projet appartient à un groupe, le niveau de permission de l'utilisateur pour le groupe est aussi pris en compte.

Tous les projets ont un niveau de visibilité qui permet de contrôler qui a accès en lecture aux pages et au dépôt de ce projet.
Si un projet est privé (_Private_), l'accès au projet doit être explicitement accordé par le propriétaire du projet à chaque utilisateur.
Un projet interne (_Internal_) est visible par tout utilisateur identifié, et un projet public (_Public_) est un projet visible par tout le monde.
Notez que ces droits contrôlent aussi bien les accès pour git `fetch` que les accès à l'interface utilisateur web du projet.

===== Crochets (_Hooks_)

GitLab inclut le support pour les crochets, tant au niveau projet que système.
Pour ces deux niveaux, le serveur GitLab lance des requêtes HTTP POST contenant un JSON de description lorsque certains événements précis arrivent.
C'est une excellent moyen de connecter vos dépôts Git et votre instance GitLab avec le reste de vos automatisations de développement, telles que serveurs d'intégration continue, forum de discussion et outils de déploiement.

==== Usage de base

La première chose à faire avec GitLab est de créer un nouveau projet.
Pour cela, il suffit de cliquer sur l’icône `+` sur la barre d'outils.
On vous demande le nom du projet, à quel espace de nom il appartient, et son niveau de visibilité.
La plupart des configurations demandées ici ne sont pas permanentes et peuvent être réajustées plus tard grâce à l'interface de paramétrage.
Cliquez sur `Create Project` pour achever la création.

Une fois le projet créé, on peut le connecter à un dépôt Git local.
Chaque projet est accessible sur HTTPS ou SSH, qui peuvent donc être utilisés pour un dépôt distant.
Les URLs sont visibles en haut de la page du projet.
Pour un dépôt local existant, cette commande crée un dépôt distant nommé `gitlab` pointant vers l'hébergement distant :

[source,console]
----
$ git remote add gitlab https://serveur/espace_de_nom/projet.git
----

Si vous n'avez pas de copie locale du dépôt, vous pouvez simplement taper ceci :

[source,console]
----
$ git clone https://serveur/espace_de_nom/projet.git
----

L'interface utilisateur web donne accès à différentes vues utiles du dépôt lui-même.
La page d'accueil de chaque projet montre l'activité récente et des liens alignés en haut vous mènent aux fichiers du projet et au journal des _commits_.

==== Coopérer

Le moyen le plus simple de coopérer sur un projet GitLab consiste à donner à un autre utilisateur un accès direct en écriture sur le dépôt Git.
Vous pouvez ajouter un utilisateur à un projet en sélectionnant la section `Members` des paramètres du projet et en associant le nouvel utilisateur à un niveau d'accès (les différents niveaux d'accès sont abordés dans <<ch04-git-on-the-server#s_gitlab_groups_section>>).
En donnant un niveau d'accès `Developer` ou plus à un utilisateur, cet utilisateur peut pousser des _commits_ et des branches directement sur le dépôt sans restriction.

Un autre moyen plus découplé de collaborer est d'utiliser des requêtes de tirage (_pull request_).
Cette fonction permet à n'importe quel utilisateur qui peut voir le projet d'y contribuer de manière contrôlée.
Les utilisateurs avec un accès direct peuvent simplement créer une branche, pousser des _commits_ dessus et ouvrir une requête de tirage depuis leur branche vers `master` ou toute autre branche.
Les utilisateurs qui n'ont pas la permission de pousser sur un dépôt peuvent en faire un _fork_ (créer leur propre copie), pousser des _commits_ sur cette copie et ouvrir une requête de tirage depuis leur _fork_ vers le projet principal.
Ce modèle permet au propriétaire de garder le contrôle total sur ce qui entre dans le dépôt et quand, tout en autorisant les contributions des utilisateurs non fiables.

Les requêtes de fusion (_merge requests_) et les problèmes (_issues_) sont les principaux moyens pour mener des discussions au long cours dans GitLab.
Chaque requête de fusion permet une discussion ligne par ligne sur les modifications proposées (qui permettent une sorte de revue de code légère), ainsi qu'un fil de discussion général.
Requêtes de fusion et problèmes peuvent être assignés à des utilisateurs ou assemblés en jalons (_milestones_).

Cette section se concentre principalement sur les parties de GitLab dédiées à Git, mais c'est un système assez mature qui fournit beaucoup d'autres fonctions qui peuvent aider votre équipe à coopérer.
Parmi celles-ci figurent les wikis, les murs de discussion et des outils de maintenance du système.
Un des bénéfices de GitLab est que, une fois le serveur paramétré et en marche, vous n'aurez pas besoin de bricoler un fichier de configuration ou d'accéder au serveur via SSH ; la plupart des tâches générales ou d'administration peuvent se réaliser à travers l'interface web.
