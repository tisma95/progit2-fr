[[s_git_aliases]]
=== Les alias Git

(((alias)))
Avant de clore ce chapitre sur les bases de Git, il reste une astuce qui peut rendre votre apprentissage de Git plus simple, facile ou familier : les alias.
Nous n'y ferons pas référence ni ne les considèrerons utilisés dans la suite du livre, mais c'est un moyen de facilité qui mérite d'être connu.

Git ne complète pas votre commande si vous ne la tapez que partiellement.
Si vous ne voulez pas avoir à taper l'intégralité du texte de chaque commande, vous pouvez facilement définir un alias pour chaque commande en utilisant `git config`.(((commandes git, config)))
Voici quelques exemples qui pourraient vous intéresser :

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Ceci signifie que, par exemple, au lieu de taper `git commit`, vous n'avez plus qu'à taper `git ci`.
Au fur et à mesure de votre utilisation de Git, vous utiliserez probablement d'autres commandes plus fréquemment.
Dans ce cas, n'hésitez pas à créer de nouveaux alias.

Cette technique peut aussi être utile pour créer des commandes qui vous manquent.
Par exemple, pour corriger le problème d'ergonomie que vous avez rencontré lors de la désindexation d'un fichier, vous pourriez créer un alias pour désindexer :

----
$ git config --global alias.unstage 'reset HEAD --'
----

Cela rend les deux commandes suivantes équivalentes :

[source,console]
----
$ git unstage fileA
$ git reset HEAD fileA
----

Cela rend les choses plus claires.
Il est aussi commun d'ajouter un alias `last`, de la manière suivante :

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Ainsi, vous pouvez visualiser plus facilement le dernier _commit_ :

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Pour explication, Git remplace simplement la nouvelle commande par tout ce que vous lui aurez demandé d'aliaser.
Si par contre vous souhaitez lancer une commande externe plutôt qu'une sous-commande Git, vous pouvez commencer votre commande par un caractère `!`.
C'est utile si vous écrivez vos propres outils pour travailler dans un dépôt Git.
On peut par exemple aliaser `git visual` pour lancer `gitk` :

[source,console]
----
$ git config --global alias.visual "!gitk"
----
